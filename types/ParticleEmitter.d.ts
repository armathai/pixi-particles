import { Container, Texture } from 'pixi.js';
import { SpriteMode } from './constants/SpriteMode';
import { ParticleEmitterConfig } from './ParticleEmitterConfig';
export declare class ParticleEmitter {
    duration: number;
    durationTimer: number;
    sprites: Texture[];
    continuous: boolean;
    name: string;
    private _delayValue;
    private _lifeOffsetValue;
    private _durationValue;
    private _lifeValue;
    private _emissionValue;
    private _xScaleValue;
    private _yScaleValue;
    private _rotationValue;
    private _velocityValue;
    private _angleValue;
    private _windValue;
    private _gravityValue;
    private _transparencyValue;
    private _tintValue;
    private _xOffsetValue;
    private _yOffsetValue;
    private _spawnWidthValue;
    private _spawnHeightValue;
    private _spawnShapeValue;
    private _xSizeValues;
    private _ySizeValues;
    private _motionValues;
    private _accumulator;
    private _spriteMode;
    private _particles;
    private _minParticleCount;
    private _maxParticleCount;
    private _x;
    private _y;
    private _container;
    private _activeCount;
    private _active;
    private _firstUpdate;
    private _flipX;
    private _flipY;
    private _updateFlags;
    private _allowCompletion;
    private _emission;
    private _emissionDiff;
    private _emissionDelta;
    private _lifeOffset;
    private _lifeOffsetDiff;
    private _life;
    private _lifeDiff;
    private _spawnWidth;
    private _spawnWidthDiff;
    private _spawnHeight;
    private _spawnHeightDiff;
    private _delay;
    private _delayTimer;
    private _attached;
    private _aligned;
    private _additive;
    constructor(container: Container, name: string, emitterConfig: ParticleEmitterConfig, textureFactory: typeof Texture.from);
    update(delta: number): void;
    setTextures(sprites: Texture[]): void;
    setSpriteMode(spriteMode: SpriteMode): void;
    /**
     * Allocates max particles emitter can hold. Usually called early on to avoid allocation on updates.
     */
    preAllocateParticles(): void;
    allowCompletion(): void;
    start(): void;
    reset(): void;
    isComplete(): boolean;
    getPercentComplete(): number;
    private _newParticle;
    private _setMaxParticleCount;
    private _setMinParticleCount;
    private _addParticle;
    private _addParticles;
    private _restart;
    private _initialize;
    private _activateParticle;
    private _deactivateParticle;
    private _updateParticle;
    private _generateLifeValues;
    private _generateLifeOffsetValues;
}
